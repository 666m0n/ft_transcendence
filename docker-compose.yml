version: '3.8'

services:
  # Base de donnees PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ft_transcendence_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-transcendence}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-transcendence123}
      POSTGRES_DB: ${POSTGRES_DB:-transcendence}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - transcendence_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-transcendence}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Fastify
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ft_transcendence_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-transcendence}:${POSTGRES_PASSWORD:-transcendence123}@postgres:5432/${POSTGRES_DB:-transcendence}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      OAUTH42_CLIENT_ID: ${OAUTH42_CLIENT_ID}
      OAUTH42_CLIENT_SECRET: ${OAUTH42_CLIENT_SECRET}
      OAUTH42_CALLBACK_URL: ${OAUTH42_CALLBACK_URL:-http://localhost:3000/api/auth/42/callback}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - transcendence_network
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ft_transcendence_frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - transcendence_network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local

networks:
  transcendence_network:
    driver: bridge
